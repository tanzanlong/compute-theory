##tcp协议
tcp是一个面向连接，字节流和可靠传输的全双工传输协议
tcp是面向连接的，所以基于多播和组播的应用程序不能用tcp。

##tcp的可靠性
1.采用应答机制。发送方发送的每个报文段都需要得到客户端的应答。才认为传输成功。
2.采用超时重传机制。发出一个tcp报文段后，启动定时器，定时时间内未收到应答，重发该报文段。
3.tcp报文段可能乱序，重复。tcp还会重排整理。再给大应用层。


##tcp头部（netstat -i ，tcpdump -i eth0  tcp  port  8080）

16:06:13.342954 IP 10.10.0.70.60931 > X-JENKINS-1.webcache: Flags [S], seq 1724873739, win 8192, options [mss 1286,nop,wscale 2,nop,nop,sackOK], length 0

Flags [S] 表示该报文段包含SYN标志。因此它是一个同步报文段。

seq是序号值，
win是窗口大小
wscale 窗口扩大因子。取值范围（0-14），可以通过修改/proc/sys/net/ipv4/tcp_window_scaling内核变量来关闭窗口扩大因子选项。tcp报文段的实际接收通告窗口大小为win乘以2的wscale次方倍。

mss 最大报文段长度选项。连接初始化时，双方用来协商最大报文段长度。通常设置为MTU-40字节，减掉的40字节包括，20字节tcp头部和20字节ip头部。mss和wscale都只能出现
在同步报文段中，否则会被忽略。

sack 选择性确认。tcp某个报文丢失，其后续的所有报文会重传。这样原先正确发送的tcp报文也会重复发送，导致性能降低。通过这个选项可以知发送丢失的报文，从而改善这种情况。

sackOK 表示发送端支持并同意使用sack。

nop 空操作选项


## 三次握手
![](https://github.com/tanzanlong/compute-theory/tree/master/img/221638042536625.png)
